{"version":3,"sources":["constants/style.ts","components/Nav.tsx","components/CalendarLinks.tsx","components/Home.tsx","components/Details.tsx","components/Map.tsx","components/Accommodations.tsx","serviceWorker.ts","index.tsx"],"names":["calcNotchSize","boxShadow","flexRowStyle","alignContent","alignItems","display","flexDirection","flexWrap","justifyContent","width","fontStyle","color","fontFamily","fontSize","fontWeight","textAlign","linkStyle","navStyle","background","minHeight","position","zIndex","navLinkStyle","minWidth","textDecoration","homeStyle","backgroundAttachment","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","filter","notchBoxStyle","clipPath","maxWidth","padding","popoverLinkStyle","border","cursor","outline","popoverContainerStyle","calendarLinksStyle","listStyle","paddingInlineStart","detailsStyle","detailBoxStyle","margin","mapStyle","height","accomodationsStyle","hotelBoxStyle","detailsFont","opacity","StyledNavLink","destination","style","smooth","to","Nav","event","calendarInfoArray","label","href","CalendarLink","target","rel","CalendarLinks","React","useState","popoverOpen","setPopoverOpen","containerStyle","isOpen","disableReposition","onClickOutside","content","map","info","key","onClick","Home","id","detailsInfoArray","location","date","time","blurb","DetailItem","Details","mapInfoArray","lat","lng","MapMarker","size","Map","bootstrapURLKeys","process","defaultCenter","defaultZoom","locationInfoArray","price","contact","LocationBox","Accommodations","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed67710a.chunk.js","sourcesContent":["import { CSSProperties } from 'react';\n\nconst white = '#fff';\nconst darkGreen = '#054b30';\nconst translucentDarkGreen = 'rgba(5, 50, 33, .7)';\nconst font = 'sans-serif';\nconst fontSizeBody = '20px';\nconst fontSizeHome = '25px';\nconst notchSize = '50px';\nconst calcNotchSize = `calc(100% - ${notchSize})`;\nconst boxShadow = '0px 4px 8px rgba(0, 0, 0, 0.2)';\n\nexport const flexRowStyle: CSSProperties = {\n  alignContent: 'center',\n  alignItems: 'flex-top',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'space-evenly',\n  width: '100%',\n};\n\nexport const fontStyle: CSSProperties = {\n  color: darkGreen,\n  fontFamily: font,\n  fontSize: fontSizeBody,\n  fontWeight: 200,\n  textAlign: 'center',\n};\n\nexport const linkStyle: CSSProperties = {\n  ...fontStyle,\n  color: white,\n};\n\nexport const navStyle: CSSProperties = {\n  ...flexRowStyle,\n  background: translucentDarkGreen,\n  minHeight: '5vh',\n  position: 'fixed',\n  zIndex: 100,\n};\n\nexport const navLinkStyle: CSSProperties = {\n  ...linkStyle,\n  minWidth: '20%',\n  textDecoration: 'none',\n};\n\nexport const homeStyle: CSSProperties = {\n  ...flexRowStyle,\n  backgroundAttachment: 'fixed',\n  backgroundImage: 'url(\"../images/eucalyptus-upper.png\")',\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover',\n  filter: `drop-shadow(${boxShadow})`,\n  minHeight: '100vh',\n};\n\nexport const notchBoxStyle: CSSProperties = {\n  background: white,\n  clipPath: `polygon(\n    0% ${notchSize},\n    ${notchSize} ${notchSize},\n    ${notchSize} 0%,\n    ${calcNotchSize} 0%,\n    ${calcNotchSize} ${notchSize},\n    100% ${notchSize},\n    100% ${calcNotchSize},\n    ${calcNotchSize} ${calcNotchSize},\n    ${calcNotchSize} 100%,\n    ${notchSize} 100%,\n    ${notchSize} ${calcNotchSize},\n    0% ${calcNotchSize})`,\n  fontSize: fontSizeHome,\n  maxWidth: '600px',\n  padding: '3rem',\n};\n\nexport const popoverLinkStyle: CSSProperties = {\n  ...fontStyle,\n  border: 'none',\n  cursor: 'pointer',\n  fontSize: fontSizeHome,\n  outline: 'none',\n  padding: 0,\n  textDecoration: 'underline',\n};\n\nexport const popoverContainerStyle: CSSProperties = {\n  background: translucentDarkGreen,\n  boxShadow,\n  padding: '30px',\n};\n\nexport const calendarLinksStyle: CSSProperties = {\n  listStyle: 'none',\n  paddingInlineStart: 0,\n};\n\nexport const detailsStyle: CSSProperties = {\n  background: darkGreen,\n  color: white,\n  padding: '100px 0',\n};\n\nexport const detailBoxStyle: CSSProperties = {\n  margin: '10px',\n  maxWidth: '300px',\n  padding: '30px',\n};\n\nexport const mapStyle: CSSProperties = {\n  height: '50vh',\n  width: '100%',\n};\n\nexport const accomodationsStyle: CSSProperties = {\n  ...flexRowStyle,\n  alignItems: 'stretch',\n  backgroundImage: 'url(\"../images/branch-frame.png\")',\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  padding: '100px 0',\n};\n\nexport const hotelBoxStyle: CSSProperties = {\n  ...detailBoxStyle,\n  background: white,\n  boxShadow,\n};\n\nexport const detailsFont: CSSProperties = {\n  fontSize: '16px',\n  opacity: 0.6,\n  padding: '5px',\n};\n","import React, { ReactElement } from 'react';\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nimport { navStyle, navLinkStyle } from '../constants/style';\n\nconst StyledNavLink = ({\n  destination,\n}: {\n  destination: string;\n}): ReactElement => (\n  <NavLink style={navLinkStyle} smooth to={`#${destination}`}>\n    {destination}\n  </NavLink>\n);\n\nconst Nav = (): ReactElement => (\n  <div style={navStyle}>\n    <StyledNavLink destination=\"Home\" />\n    <StyledNavLink destination=\"Details\" />\n    <StyledNavLink destination=\"Accommodations\" />\n  </div>\n);\n\nexport default Nav;\n","import React, { ReactElement } from 'react';\nimport Popover from 'react-tiny-popover';\nimport {\n  popoverContainerStyle,\n  calendarLinksStyle,\n  popoverLinkStyle,\n  linkStyle,\n} from '../constants/style';\n\ninterface LinkInfo {\n  label: string;\n  href: string;\n}\n\nconst event = {\n  title: \"Alyssa and Danny's Wedding\",\n  description: 'Come celebrate with us!',\n  location: 'The Faculty Club, Minor Ln, Berkeley, CA 94720, USA',\n  startTime: '20200815T230000Z',\n  endTime: '20200816T060000Z',\n};\n\nconst calendarInfoArray: LinkInfo[] = [\n  {\n    label: 'Google',\n    href: `https://calendar.google.com/calendar/render?action=TEMPLATE&dates=${event.startTime}/${event.endTime}&location=${event.location}&text=${event.title}&details=${event.description}`,\n  },\n  {\n    label: 'Outlook',\n    href: `https://outlook.live.com/owa/?rru=addevent&startdt=${event.startTime}&enddt=${event.endTime}&subject=${event.title}&location=${event.location}&body=${event.description}&allday=false&uid=1582497358565_57287884127&path=/calendar/view/Month`,\n  },\n  {\n    label: 'Yahoo',\n    href: `https://calendar.yahoo.com/?v=60&view=d&type=20&title=${event.title}&st=${event.startTime}&dur=7:00&desc=${event.description}&in_loc=${event.location}`,\n  },\n];\n\nconst CalendarLink = ({ href, label }: LinkInfo): ReactElement => (\n  <li>\n    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" style={linkStyle}>\n      {label}\n    </a>\n  </li>\n);\n\nconst CalendarLinks = (): ReactElement => {\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n\n  return (\n    <Popover\n      containerStyle={popoverContainerStyle as Partial<CSSStyleDeclaration>}\n      isOpen={popoverOpen}\n      disableReposition={true}\n      position={['right', 'bottom']}\n      onClickOutside={() => setPopoverOpen(false)}\n      content={() => (\n        <div style={linkStyle}>\n          Add To Calendar\n          <ul style={calendarLinksStyle}>\n            {calendarInfoArray.map((info: LinkInfo) => (\n              <CalendarLink {...info} key={info.label} />\n            ))}\n          </ul>\n        </div>\n      )}\n    >\n      <button\n        onClick={() => setPopoverOpen(!popoverOpen)}\n        style={popoverLinkStyle}\n      >\n        August 15, 2020\n      </button>\n    </Popover>\n  );\n};\n\nexport default CalendarLinks;\n","import React, { ReactElement } from 'react';\nimport CalendarLinks from './CalendarLinks';\nimport { homeStyle, notchBoxStyle } from '../constants/style';\n\nconst Home = (): ReactElement => (\n  <div id=\"Home\" style={homeStyle}>\n    <div style={notchBoxStyle}>\n      <h3>Alyssa and Danny's Wedding</h3>\n      <p>Come celebrate with us!</p>\n      <p>\n        <CalendarLinks />\n        <br />\n        Berkeley, CA\n      </p>\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React, { ReactElement } from 'react';\nimport {\n  detailsStyle,\n  flexRowStyle,\n  detailBoxStyle,\n  detailsFont,\n} from '../constants/style';\n\ninterface DetailsInfo {\n  label: string;\n  location: string;\n  date: string;\n  time: string;\n  blurb: string;\n}\n\nconst detailsInfoArray: DetailsInfo[] = [\n  {\n    label: 'Welcome Dinner',\n    location: 'Roberts Park',\n    date: 'Friday, August 14',\n    time: '3pm - 8pm',\n    blurb:\n      'Join us for a low key dinner in our favorite Bay Area park. Food, drinks, and games will be provided.',\n  },\n  {\n    label: 'Ceremony & Reception',\n    location: 'The Faculty Club',\n    date: 'Friday, August 15',\n    time: '4pm - 10pm',\n    blurb:\n      'Both our ceremony and reception are at the Faculty Club on UC Berkeley campus.',\n  },\n  {\n    label: 'After Party',\n    location: 'TBD',\n    date: 'Friday, August 15',\n    time: '10pm - 2am',\n    blurb:\n      \"Don't wanna stop dancing? We are planning an after party! We'll update here when we iron out the details.\",\n  },\n];\n\nconst DetailItem = ({\n  label,\n  location,\n  date,\n  time,\n  blurb,\n}: DetailsInfo): ReactElement => (\n  <div style={detailBoxStyle}>\n    <h4>{label}</h4>\n    <div>\n      {location}\n      <div style={detailsFont}>\n        {date}\n        <br />\n        {time}\n      </div>\n      {blurb}\n    </div>\n  </div>\n);\n\nconst Details = (): ReactElement => (\n  <div id=\"Details\" style={detailsStyle}>\n    <h3>Details</h3>\n    <div style={flexRowStyle}>\n      {detailsInfoArray.map((info: DetailsInfo) => (\n        <DetailItem {...info} key={info.label} />\n      ))}\n    </div>\n  </div>\n);\n\nexport default Details;\n","import React, { ReactElement } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { MdLocationOn } from 'react-icons/md';\nimport { mapStyle } from '../constants/style';\n\ninterface MarkerInfo {\n  label: string;\n  lat: number;\n  lng: number;\n}\n\nconst mapInfoArray: MarkerInfo[] = [\n  {\n    label: 'Faculty Club',\n    lat: 37.871789,\n    lng: -122.255838,\n  },\n  {\n    label: 'Bancroft Hotel',\n    lat: 37.869124,\n    lng: -122.255098,\n  },\n  {\n    label: 'Berkeley City Club',\n    lat: 37.86751,\n    lng: -122.262759,\n  },\n  {\n    label: 'Roberts Redwood Regional Park',\n    lat: 37.81219,\n    lng: -122.175133,\n  },\n];\n\nconst MapMarker = ({ label }: MarkerInfo) => (\n  <div>\n    <MdLocationOn size=\"2rem\" />\n    {label}\n  </div>\n);\n\nconst Map = (): ReactElement => (\n  <div style={mapStyle}>\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: process.env.REACT_APP_MAP_API_KEY || '' }}\n      defaultCenter={{\n        lat: 37.836576,\n        lng: -122.227777,\n      }}\n      defaultZoom={12.5}\n    >\n      {mapInfoArray.map((info: MarkerInfo) => (\n        <MapMarker {...info} key={info.label} />\n      ))}\n    </GoogleMapReact>\n  </div>\n);\n\nexport default Map;\n","import React, { ReactElement } from 'react';\nimport {\n  accomodationsStyle,\n  hotelBoxStyle,\n  detailsFont,\n} from '../constants/style';\n\ninterface LocationInfo {\n  label: string;\n  blurb: string;\n  price: string;\n  contact: string;\n}\n\nconst locationInfoArray: LocationInfo[] = [\n  {\n    label: 'Berkeley City Club',\n    blurb:\n      'Designed by Julia Morgan, this unique historical landmark is walking distance from our wedding venue!',\n    price: '$219 per night',\n    contact: '(510) 848-7800',\n  },\n  {\n    label: 'Bancroft Hotel',\n    blurb:\n      'Situated across the street from campus, the Bancroft Hotel offers a cute stay in the heart of campus.',\n    price: '$149 per night',\n    contact: '(510) 549-1000',\n  },\n];\n\nconst LocationBox = ({\n  label,\n  blurb,\n  price,\n  contact,\n}: LocationInfo): ReactElement => (\n  <div style={hotelBoxStyle}>\n    <h4>{label}</h4>\n    <p>{blurb}</p>\n    <div style={detailsFont}>\n      Block rate: {price}\n      <br />\n      {contact}\n    </div>\n  </div>\n);\n\nconst Accommodations = (): ReactElement => (\n  <div id=\"Accommodations\" style={accomodationsStyle}>\n    {locationInfoArray.map((info: LocationInfo) => (\n      <LocationBox {...info} key={info.label} />\n    ))}\n  </div>\n);\n\nexport default Accommodations;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { ReactElement } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { fontStyle } from './constants/style';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport Details from './components/Details';\nimport Map from './components/Map';\nimport Accommodations from './components/Accommodations';\nimport * as serviceWorker from './serviceWorker';\n\nconst App = (): ReactElement => (\n  <div style={fontStyle}>\n    <Nav />\n    <Home />\n    <Details />\n    <Map />\n    <Accommodations />\n  </div>\n);\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}